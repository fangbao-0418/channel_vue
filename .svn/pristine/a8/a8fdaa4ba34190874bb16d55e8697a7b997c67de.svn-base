<template>
<div>
  <h2 class="text-center">充值明细表</h2>
  <div class="vsearch">
    <el-form ref="params" :inline="true" :model="params">
      <el-form-item label="账单日期">
        <el-date-picker v-model="params.starttime" type="date">
        </el-date-picker>
        <span>-</span>
        <el-date-picker v-model="params.endtime" type="date">
        </el-date-picker>
      </el-form-item>
      <el-form-item label="代理商">
        <el-autocomplete class="inline-input" v-model="params.channelname" :trigger-on-focus="false" :fetch-suggestions="querySearch"></el-autocomplete>
      </el-form-item>
      <el-form-item label="充值类型">
        <el-select v-model="params.type">
          <el-option v-for="item in financeType" :key="item.type" :label="item.name" :value="item.type"></el-option>
        </el-select>
      </el-form-item>
      <el-form-item v-if="params.type === 1" label="审核状态">
        <el-select v-model="params.status">
          <el-option v-for="item in checkStatus" :key="item.status" :label="item.name" :value="item.status"></el-option>
        </el-select>
      </el-form-item>
      <el-form-item>
        <el-button type="primary" @click="onSearch">查询</el-button>
        <el-button type="primary" @click="onDownload" :disabled="!tableData.length">导出</el-button>
      </el-form-item>
    </el-form>
  </div>
  <el-table :data="tableData" border style="width: 100%">
    <el-table-column prop="ChannelName1" label="一级代理" min-width="200">
    </el-table-column>
    <el-table-column prop="ChannelName2" label="二级代理" min-width="200">
    </el-table-column>
    <el-table-column prop="BillTime" label="账单日期" width="130">
    </el-table-column>
    <el-table-column prop="Type" label="充值类型" :formatter="TypeFormat" width="130">
    </el-table-column>
    <el-table-column prop="Amount" label="充值金额" width="130">
    </el-table-column>
    <el-table-column prop="Status" label="审核状态" :formatter="StatusFormat" width="100">
    </el-table-column>
  </el-table>
  <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="pagination.currentPage" :page-sizes="[10, 20, 30]" :page-size="pagination.pageSize" layout="total, sizes, prev, pager, next, jumper" :total="pagination.total"
    style="text-align:center; margin:20px;">
  </el-pagination>
</div>
</template>

<script>
import {
  agents
} from '../../api/api'

export default {
  data: function() {
    return {
      pagination: {
        total: 0,
        pageSize: 10,
        currentPage: 1
      },
      tableData: [{
        ChannelName1: 'xian1',
        ChannelName2: 'xian2',
        BillTime: '2017-07-19',
        Type: 2,
        Amount: '5000',
        Status: 2
      }],
      params: {
        starttime: '',
        endtime: '',
        channelname: '',
        type: 0,
        status: 0
      },
      agents: [],
      financeType: [{
        name: '全部',
        type: 0
      }, {
        name: '正常充值',
        type: 1
      }, {
        name: '退单回充',
        type: 2
      }, {
        name: '返点',
        type: 3
      }, {
        name: '一代提成',
        type: 4
      }],
      checkStatus: [{
        name: '全部',
        status: 0
      }, {
        name: '未审核',
        status: 1
      }, {
        name: '通过',
        status: 2
      }, {
        name: '拒审',
        status: 3
      }]
    }
  },
  created() {
    this.Agents()
  },
  methods: {
    onSearch() {
      // params.type = this.TypeFormat(params.type)
      // params.status = this.StatusFormat(params.status)
      // console.log(params, 'params')
      let limit = this.pagination.pageSize
      let offset = (this.pagination.currentPage - 1) * limit
      this.params.limit = limit
      this.params.offset = offset
      console.log(this.params, 'this.params')
      // getPrepaynote(this.params).then(res => {
      //   this.pagination.total = res.Count
      //   this.tableData = res.data.DataInfo
      //   this.total = res.data.Total[0]
      // })
    },
    onDownload() {
      // params.type = this.TypeFormat(params.type)
      // params.status = this.StatusFormat(params.status)
      const {
        starttime,
        endtime,
        channelname,
        type,
        status
      } = this.params
      console.log(type, status, 'onDownload')
      const url = `/api/download/prepaynote?starttime=${starttime || ''}&endtime=${endtime || ''}&channelname=${channelname || ''}&type=${type || ''}&status=${status || ''}`
      console.log(url)
      // window.open(url)
    },
    TypeFormat: function(row) {
      var type = row.Type ? row.Type : row
      switch (type) {
        case 1:
          type = '未审核'
          break
        case 2:
          type = '通过'
          break
        case 3:
          type = '拒审'
          break
      }
      return type
    },
    StatusFormat: function(row) {
      var status = row.Status ? row.Status : row
      switch (status) {
        case 1:
          status = '正常充值'
          break
        case 2:
          status = '退单回充'
          break
        case 3:
          status = '返点'
          break
        case 4:
          status = '一代提成'
          break
      }
      return status
    },
    Agents() {
      agents().then((res) => {
        this.agents = res.data
        for (let i in this.agents) {
          this.agents[i].value = this.agents[i].ChannelName
        }
        // console.log(this.agents)
      })
    },
    querySearch(queryString, cb) {
      var channels = this.agents
      var results = queryString ? channels.filter(this.createFilter(queryString)) : channels
      cb(results)
    },
    createFilter(queryString) {
      return (channel) => {
        return (channel.value.indexOf(queryString) >= 0)
      }
    },
    handleSizeChange(val) {
      this.pagination.pageSize = val
      this.onSearch()
    },
    handleCurrentChange(val) {
      this.pagination.currentPage = val
      this.onSearch()
    }
  }
}
</script>

<style scoped>
</style>
