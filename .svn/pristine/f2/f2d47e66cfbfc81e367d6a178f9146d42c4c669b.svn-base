<template>
<el-form :inline="true" :model="params" class="searchForm">
  <el-form-item label="" v-show="!hideDate">
    <el-date-picker v-model="params.starttime" type="date" placeholder="开始日期">
    </el-date-picker>
    <span>-</span>
    <el-date-picker v-model="params.endtime" type="date" placeholder="结束日期">
    </el-date-picker>
  </el-form-item>
  <el-form-item label="" v-show="showDateRange">
    <el-date-picker v-model="params.laststarttime" type="date" placeholder="开始日期">
    </el-date-picker>
    <span>-</span>
    <el-date-picker v-model="params.lastendtime" type="date" placeholder="结束日期">
    </el-date-picker>
  </el-form-item>
  <el-form-item label="大区">
    <el-select v-model="params.partitions" multiple placeholder="全部" @change="getParamsProvince(),getParamsCities()">
      <el-option v-for="item in partitions" :key="item.Id" :label="item.PartitionName" :value="item.Id">
      </el-option>
    </el-select>
  </el-form-item>
  <el-form-item label="省份">
    <el-select v-model="params.provinces" multiple placeholder="全部" @change="getParamsCities()">
      <el-option v-for="item in provinces" :key="item.ProvinceCode" :label="item.ProvinceName" :value="item.ProvinceCode">
      </el-option>
    </el-select>
  </el-form-item>
  <el-form-item label="城市">
    <el-select v-model="params.ccodes" multiple placeholder="全部">
      <el-option v-for="item in cities" :key="item.CityCode" :label="item.CityName" :value="item.CityCode">
      </el-option>
    </el-select>
  </el-form-item>
  <el-form-item label="代理商" v-show="!hideChannel">
    <el-input placeholder="代理商名称" v-model="params.channelname"></el-input>
  </el-form-item>
  <el-form-item>
    <el-button type="primary" @click="onSearch">查询</el-button>
    <el-button type="primary" @click="onDownload">导出</el-button>
  </el-form-item>
</el-form>
</template>
<script>
import {
  getPartitions,
  getParamsProvince,
  getParamsCities
} from '../api/api'
export default {
  name: 'searchParams',
  props: ['hideChannel', 'hideDate', 'showDateRange'],
  data() {
    return {
      params: {
        starttime: '',
        endtime: '',
        laststarttime: '',
        lastendtime: '',
        partitions: [],
        provinces: [],
        ccodes: [],
        channelname: ''
      },
      partitions: [],
      provinces: [],
      cities: []
    }
  },
  created() {
    this.getPartitions()
    this.getParamsProvince()
    this.getParamsCities()
  },
  methods: {
    getPartitions() {
      getPartitions().then((res) => {
        this.partitions = res.data
      })
    },
    getParamsProvince() {
      const param = {
        ChannelPartitionIds: this.params.partitions.join(',')
      }
      getParamsProvince(param).then((res) => {
        this.provinces = res.data
      })
    },
    getParamsCities() {
      this.params.ccodes = []
      const param = {
        ChannelPartitionIds: this.params.partitions.join(','),
        pcodes: this.params.provinces.join(',')
      }
      getParamsCities(param).then((res) => {
        this.cities = res.data
      })
    },
    onSearch() {
      let {
        starttime,
        endtime,
        ccodes,
        channelname
      } = this.params
      let params = {
        starttime,
        endtime,
        ccodes,
        channelname
      }
      if (this.params.partitions.length > 0 || this.params.provinces.length > 0 && ccodes.length === 0) {
        ccodes = this.cities.map(item => item.CityCode)
      }
      if (this.showDateRange) {
        params.laststarttime = this.params.laststarttime
        params.lastendtime = this.params.lastendtime
      }
      params.ccodes = ccodes.join(',')
      this.$emit('search', params, this.cities)
    },
    onDownload() {
      let {
        starttime,
        endtime,
        ccodes,
        channelname
      } = this.params
      let params = {
        starttime,
        endtime,
        ccodes,
        channelname
      }
      if (this.params.partitions.length > 0 || this.params.provinces.length > 0 && ccodes.length === 0) {
        ccodes = this.cities.map(item => item.CityCode)
      }
      if (this.showDateRange) {
        params.laststarttime = this.params.laststarttime
        params.lastendtime = this.params.lastendtime
      }
      params.ccodes = ccodes.join(',')
      this.$emit('download', params, this.cities)
    }
  }
}
</script>
<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
form {
  padding: 6px 12px;
}

.searchForm .el-input {
  width: 130px;
}

.searchForm .el-select {
  width: 150px;
  overflow: hidden;
}

.searchForm .el-select>.el-select__tags {
  max-width: none!important;
  height: 34px;
  overflow: hidden;
}
</style>
