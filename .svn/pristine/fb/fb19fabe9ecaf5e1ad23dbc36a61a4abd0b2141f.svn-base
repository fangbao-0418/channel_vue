<template>
<div>
  <el-dialog title="充值明细" :visible.sync="dialogTableVisible" size="large">
    <el-table :data="gridData">
      <el-table-column type="index" label="序号" width="80"></el-table-column>
      <el-table-column property="BillId" label="账单号" width="150"></el-table-column>
      <el-table-column property="Amount" label="充值金额" width="100"></el-table-column>
      <el-table-column property="Balance" label="余额" width="100"></el-table-column>
      <el-table-column property="Description" label="备注"></el-table-column>
      <el-table-column property="BillTime" label="订单时间" width="180"></el-table-column>
      <el-table-column v-if="type == 1" label="操作" width="200">
        <template scope="scope">
            <el-button @click="scanView(scope.row)" type="text" size="small">查看</el-button>
          </template>
      </el-table-column>
    </el-table>
    <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="pagination.currentPage" :page-sizes="[5, 10, 15]" :page-size="pagination.pageSize" layout="total, sizes, prev, pager, next, jumper" :total="pagination.total"
      style="text-align:center; margin:20px;">
    </el-pagination>
    <div slot="footer" class="dialog-footer">
      <el-button type="primary" @click="dialogTableVisible = false">关 闭</el-button>
    </div>
  </el-dialog>
</div>
</template>

<script>
import {
  rechargeDetail,
  orderTitle
} from '../api/api'
import AddOrder from './addOrder'
import Dialog from '../service/dialog.js'
export default {
  props: ['type', 'channelId'],
  data() {
    return {
      pagination: {
        total: 0,
        pageSize: 5,
        currentPage: 1
      },
      dialogTableVisible: true,
      gridData: []
    }
  },
  created() {
    this.getData()
  },
  methods: {
    getData() {
      let limit = this.pagination.pageSize
      let offset = (this.pagination.currentPage - 1) * limit
      let channelId = this.channelId
      let type = this.type
      rechargeDetail({
        limit: limit,
        offset: offset,
        channelId: channelId,
        type: type
      }).then((res) => {
        this.gridData = res.data
        this.pagination.total = res.Count
      })
    },
    scanView(row) {
      var postData = ''
      orderTitle(row.OrderId).then(res => {
        postData = res.data
        Dialog(AddOrder, {
          postData: postData
        })
      })
    },
    handleSizeChange(val) {
      this.pagination.pageSize = val
      this.getData()
    },
    handleCurrentChange(val) {
      this.pagination.currentPage = val
      this.getData()
    }
  }
}
</script>

<style scoped>
</style>
